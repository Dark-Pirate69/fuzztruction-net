/* automatically generated by rust-bindgen 0.59.1 */

pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __XSI_VISIBLE: u32 = 700;
pub const __BSD_VISIBLE: u32 = 1;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __EXT1_VISIBLE: u32 = 1;
pub const __CHAR_BIT: u32 = 8;
pub const __SCHAR_MAX: u32 = 127;
pub const __SCHAR_MIN: i32 = -128;
pub const __UCHAR_MAX: u32 = 255;
pub const __USHRT_MAX: u32 = 65535;
pub const __SHRT_MAX: u32 = 32767;
pub const __SHRT_MIN: i32 = -32768;
pub const __UINT_MAX: u32 = 4294967295;
pub const __INT_MAX: u32 = 2147483647;
pub const __INT_MIN: i32 = -2147483648;
pub const __ULONG_MAX: i32 = -1;
pub const __LONG_MAX: u64 = 9223372036854775807;
pub const __LONG_MIN: i64 = -9223372036854775808;
pub const __ULLONG_MAX: i32 = -1;
pub const __LLONG_MAX: u64 = 9223372036854775807;
pub const __LLONG_MIN: i64 = -9223372036854775808;
pub const __SSIZE_MAX: u64 = 9223372036854775807;
pub const __SIZE_T_MAX: i32 = -1;
pub const __OFF_MAX: u64 = 9223372036854775807;
pub const __OFF_MIN: i64 = -9223372036854775808;
pub const __UQUAD_MAX: i32 = -1;
pub const __QUAD_MAX: u64 = 9223372036854775807;
pub const __QUAD_MIN: i64 = -9223372036854775808;
pub const __LONG_BIT: u32 = 64;
pub const __WORD_BIT: u32 = 32;
pub const __MINSIGSTKSZ: u32 = 2048;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const _SIG_WORDS: u32 = 4;
pub const _SIG_MAXSIG: u32 = 128;
pub const _X86_SIGNAL_H: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGTHR: u32 = 32;
pub const SIGLWP: u32 = 32;
pub const SIGLIBRT: u32 = 33;
pub const SIGRTMIN: u32 = 65;
pub const SIGRTMAX: u32 = 126;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 2;
pub const SIGEV_KEVENT: u32 = 3;
pub const SIGEV_THREAD_ID: u32 = 4;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLOPN: u32 = 2;
pub const ILL_ILLADR: u32 = 3;
pub const ILL_ILLTRP: u32 = 4;
pub const ILL_PRVOPC: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const FPE_INTOVF: u32 = 1;
pub const FPE_INTDIV: u32 = 2;
pub const FPE_FLTDIV: u32 = 3;
pub const FPE_FLTOVF: u32 = 4;
pub const FPE_FLTUND: u32 = 5;
pub const FPE_FLTRES: u32 = 6;
pub const FPE_FLTINV: u32 = 7;
pub const FPE_FLTSUB: u32 = 8;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const TRAP_DTRACE: u32 = 3;
pub const TRAP_CAP: u32 = 4;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const NSIG: u32 = 32;
pub const SI_NOINFO: u32 = 0;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SI_KERNEL: u32 = 65542;
pub const SI_LWP: u32 = 65543;
pub const SI_UNDEFINED: u32 = 0;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 34816;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const __FreeBSD_version: u32 = 1201000;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const _LITTLE_ENDIAN: u32 = 1234;
pub const _BIG_ENDIAN: u32 = 4321;
pub const _PDP_ENDIAN: u32 = 3412;
pub const _BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 1024;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 40;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 1023;
pub const OPEN_MAX: u32 = 64;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const IOV_MAX: u32 = 1024;
pub const MAXCOMLEN: u32 = 19;
pub const MAXINTERP: u32 = 1024;
pub const MAXLOGNAME: u32 = 33;
pub const MAXUPRC: u32 = 40;
pub const NCARGS: u32 = 262144;
pub const NGROUPS: u32 = 1024;
pub const NOFILE: u32 = 64;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const SPECNAMELEN: u32 = 63;
pub const MACHINE: &'static [u8; 6usize] = b"amd64\0";
pub const MACHINE_ARCH: &'static [u8; 6usize] = b"amd64\0";
pub const MACHINE_ARCH32: &'static [u8; 5usize] = b"i386\0";
pub const MAXCPU: u32 = 1;
pub const MAXMEMDOM: u32 = 8;
pub const CACHE_LINE_SHIFT: u32 = 6;
pub const CACHE_LINE_SIZE: u32 = 64;
pub const NPTEPGSHIFT: u32 = 9;
pub const PAGE_SHIFT: u32 = 12;
pub const PAGE_SIZE: u32 = 4096;
pub const PAGE_MASK: u32 = 4095;
pub const NPDEPGSHIFT: u32 = 9;
pub const PDRSHIFT: u32 = 21;
pub const NBPDR: u32 = 2097152;
pub const PDRMASK: u32 = 2097151;
pub const NPDPEPGSHIFT: u32 = 9;
pub const PDPSHIFT: u32 = 30;
pub const NBPDP: u32 = 1073741824;
pub const PDPMASK: u32 = 1073741823;
pub const NPML4EPGSHIFT: u32 = 9;
pub const PML4SHIFT: u32 = 39;
pub const NBPML4: u64 = 549755813888;
pub const PML4MASK: u64 = 549755813887;
pub const MAXPAGESIZES: u32 = 3;
pub const IOPAGES: u32 = 2;
pub const IOPERM_BITMAP_SIZE: u32 = 8193;
pub const KSTACK_PAGES: u32 = 4;
pub const KSTACK_GUARD_PAGES: u32 = 1;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const SIZE_T_MAX: i32 = -1;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const GID_MAX: u32 = 4294967295;
pub const UID_MAX: u32 = 4294967295;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const WORD_BIT: u32 = 32;
pub const MQ_PRIO_MAX: u32 = 64;
pub const DEV_BSHIFT: u32 = 9;
pub const DEV_BSIZE: u32 = 512;
pub const BLKDEV_IOSIZE: u32 = 4096;
pub const DFLTPHYS: u32 = 65536;
pub const MAXPHYS: u32 = 131072;
pub const MAXDUMPPGS: u32 = 16;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MJUMPAGESIZE: u32 = 4096;
pub const MJUM9BYTES: u32 = 9216;
pub const MJUM16BYTES: u32 = 16384;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PDROP: u32 = 512;
pub const NZERO: u32 = 0;
pub const NBBY: u32 = 8;
pub const CMASK: u32 = 18;
pub const MAXBSIZE: u32 = 65536;
pub const MAXBCACHEBUF: u32 = 65536;
pub const BKVASIZE: u32 = 16384;
pub const BKVAMASK: u32 = 16383;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const DBREG_DR6_RESERVED1: u32 = 4294905840;
pub const DBREG_DR6_BMASK: u32 = 15;
pub const DBREG_DR6_BD: u32 = 8192;
pub const DBREG_DR6_BS: u32 = 16384;
pub const DBREG_DR6_BT: u32 = 32768;
pub const DBREG_DR7_RESERVED1: u32 = 1024;
pub const DBREG_DR7_LOCAL_ENABLE: u32 = 1;
pub const DBREG_DR7_GLOBAL_ENABLE: u32 = 2;
pub const DBREG_DR7_LEN_1: u32 = 0;
pub const DBREG_DR7_LEN_2: u32 = 1;
pub const DBREG_DR7_LEN_4: u32 = 3;
pub const DBREG_DR7_LEN_8: u32 = 2;
pub const DBREG_DR7_EXEC: u32 = 0;
pub const DBREG_DR7_WRONLY: u32 = 1;
pub const DBREG_DR7_RDWR: u32 = 3;
pub const DBREG_DR7_GD: u32 = 8192;
pub const PT_TRACE_ME: u32 = 0;
pub const PT_READ_I: u32 = 1;
pub const PT_READ_D: u32 = 2;
pub const PT_WRITE_I: u32 = 4;
pub const PT_WRITE_D: u32 = 5;
pub const PT_CONTINUE: u32 = 7;
pub const PT_KILL: u32 = 8;
pub const PT_STEP: u32 = 9;
pub const PT_ATTACH: u32 = 10;
pub const PT_DETACH: u32 = 11;
pub const PT_IO: u32 = 12;
pub const PT_LWPINFO: u32 = 13;
pub const PT_GETNUMLWPS: u32 = 14;
pub const PT_GETLWPLIST: u32 = 15;
pub const PT_CLEARSTEP: u32 = 16;
pub const PT_SETSTEP: u32 = 17;
pub const PT_SUSPEND: u32 = 18;
pub const PT_RESUME: u32 = 19;
pub const PT_TO_SCE: u32 = 20;
pub const PT_TO_SCX: u32 = 21;
pub const PT_SYSCALL: u32 = 22;
pub const PT_FOLLOW_FORK: u32 = 23;
pub const PT_LWP_EVENTS: u32 = 24;
pub const PT_GET_EVENT_MASK: u32 = 25;
pub const PT_SET_EVENT_MASK: u32 = 26;
pub const PT_GET_SC_ARGS: u32 = 27;
pub const PT_GETREGS: u32 = 33;
pub const PT_SETREGS: u32 = 34;
pub const PT_GETFPREGS: u32 = 35;
pub const PT_SETFPREGS: u32 = 36;
pub const PT_GETDBREGS: u32 = 37;
pub const PT_SETDBREGS: u32 = 38;
pub const PT_VM_TIMESTAMP: u32 = 40;
pub const PT_VM_ENTRY: u32 = 41;
pub const PT_FIRSTMACH: u32 = 64;
pub const PT_GETXSTATE_INFO: u32 = 68;
pub const PT_GETXSTATE: u32 = 69;
pub const PT_SETXSTATE: u32 = 70;
pub const PT_GETFSBASE: u32 = 71;
pub const PT_SETFSBASE: u32 = 72;
pub const PT_GETGSBASE: u32 = 73;
pub const PT_SETGSBASE: u32 = 74;
pub const PTRACE_EXEC: u32 = 1;
pub const PTRACE_SCE: u32 = 2;
pub const PTRACE_SCX: u32 = 4;
pub const PTRACE_SYSCALL: u32 = 6;
pub const PTRACE_FORK: u32 = 8;
pub const PTRACE_LWP: u32 = 16;
pub const PTRACE_VFORK: u32 = 32;
pub const PTRACE_DEFAULT: u32 = 1;
pub const PIOD_READ_D: u32 = 1;
pub const PIOD_WRITE_D: u32 = 2;
pub const PIOD_READ_I: u32 = 3;
pub const PIOD_WRITE_I: u32 = 4;
pub const PL_EVENT_NONE: u32 = 0;
pub const PL_EVENT_SIGNAL: u32 = 1;
pub const PL_FLAG_SA: u32 = 1;
pub const PL_FLAG_BOUND: u32 = 2;
pub const PL_FLAG_SCE: u32 = 4;
pub const PL_FLAG_SCX: u32 = 8;
pub const PL_FLAG_EXEC: u32 = 16;
pub const PL_FLAG_SI: u32 = 32;
pub const PL_FLAG_FORKED: u32 = 64;
pub const PL_FLAG_CHILD: u32 = 128;
pub const PL_FLAG_BORN: u32 = 256;
pub const PL_FLAG_EXITED: u32 = 512;
pub const PL_FLAG_VFORKED: u32 = 1024;
pub const PL_FLAG_VFORK_DONE: u32 = 2048;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __clock_t = __int32_t;
pub type __critical_t = __int64_t;
pub type __double_t = f64;
pub type __float_t = f32;
pub type __intfptr_t = __int64_t;
pub type __intptr_t = __int64_t;
pub type __intmax_t = __int64_t;
pub type __int_fast8_t = __int32_t;
pub type __int_fast16_t = __int32_t;
pub type __int_fast32_t = __int32_t;
pub type __int_fast64_t = __int64_t;
pub type __int_least8_t = __int8_t;
pub type __int_least16_t = __int16_t;
pub type __int_least32_t = __int32_t;
pub type __int_least64_t = __int64_t;
pub type __ptrdiff_t = __int64_t;
pub type __register_t = __int64_t;
pub type __segsz_t = __int64_t;
pub type __size_t = __uint64_t;
pub type __ssize_t = __int64_t;
pub type __time_t = __int64_t;
pub type __uintfptr_t = __uint64_t;
pub type __uintptr_t = __uint64_t;
pub type __uintmax_t = __uint64_t;
pub type __uint_fast8_t = __uint32_t;
pub type __uint_fast16_t = __uint32_t;
pub type __uint_fast32_t = __uint32_t;
pub type __uint_fast64_t = __uint64_t;
pub type __uint_least8_t = __uint8_t;
pub type __uint_least16_t = __uint16_t;
pub type __uint_least32_t = __uint32_t;
pub type __uint_least64_t = __uint64_t;
pub type __u_register_t = __uint64_t;
pub type __vm_offset_t = __uint64_t;
pub type __vm_paddr_t = __uint64_t;
pub type __vm_size_t = __uint64_t;
pub type ___wchar_t = ::std::os::raw::c_int;
pub type __blksize_t = __int32_t;
pub type __blkcnt_t = __int64_t;
pub type __clockid_t = __int32_t;
pub type __fflags_t = __uint32_t;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __id_t = __int64_t;
pub type __ino_t = __uint64_t;
pub type __key_t = ::std::os::raw::c_long;
pub type __lwpid_t = __int32_t;
pub type __mode_t = __uint16_t;
pub type __accmode_t = ::std::os::raw::c_int;
pub type __nl_item = ::std::os::raw::c_int;
pub type __nlink_t = __uint64_t;
pub type __off_t = __int64_t;
pub type __off64_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __rlim_t = __int64_t;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __suseconds_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __timer {
    _unused: [u8; 0],
}
pub type __timer_t = *mut __timer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mq {
    _unused: [u8; 0],
}
pub type __mqd_t = *mut __mq;
pub type __uid_t = __uint32_t;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __cpuwhich_t = ::std::os::raw::c_int;
pub type __cpulevel_t = ::std::os::raw::c_int;
pub type __cpusetid_t = ::std::os::raw::c_int;
pub type __daddr_t = __int64_t;
pub type __ct_rune_t = ::std::os::raw::c_int;
pub type __rune_t = __ct_rune_t;
pub type __wint_t = __ct_rune_t;
pub type __char16_t = __uint_least16_t;
pub type __char32_t = __uint_least32_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __max_align_t {
    pub __max_align1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __max_align2: u128,
}
#[test]
fn bindgen_test_layout___max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<__max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(__max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(__max_align_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__max_align_t>())).__max_align1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__max_align_t),
            "::",
            stringify!(__max_align1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__max_align_t>())).__max_align2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__max_align_t),
            "::",
            stringify!(__max_align2)
        )
    );
}
pub type __dev_t = __uint64_t;
pub type __fixpt_t = __uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: __int64_t,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __rman_res_t = __uintmax_t;
pub type __va_list = __builtin_va_list;
pub type __gnuc_va_list = __va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset {
    pub __bits: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout___sigset() {
    assert_eq!(
        ::std::mem::size_of::<__sigset>(),
        16usize,
        concat!("Size of: ", stringify!(__sigset))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset>(),
        4usize,
        concat!("Alignment of ", stringify!(__sigset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset),
            "::",
            stringify!(__bits)
        )
    );
}
pub type __sigset_t = __sigset;
pub type sig_atomic_t = ::std::os::raw::c_long;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext {
    pub sc_mask: __sigset,
    pub sc_onstack: ::std::os::raw::c_long,
    pub sc_rdi: ::std::os::raw::c_long,
    pub sc_rsi: ::std::os::raw::c_long,
    pub sc_rdx: ::std::os::raw::c_long,
    pub sc_rcx: ::std::os::raw::c_long,
    pub sc_r8: ::std::os::raw::c_long,
    pub sc_r9: ::std::os::raw::c_long,
    pub sc_rax: ::std::os::raw::c_long,
    pub sc_rbx: ::std::os::raw::c_long,
    pub sc_rbp: ::std::os::raw::c_long,
    pub sc_r10: ::std::os::raw::c_long,
    pub sc_r11: ::std::os::raw::c_long,
    pub sc_r12: ::std::os::raw::c_long,
    pub sc_r13: ::std::os::raw::c_long,
    pub sc_r14: ::std::os::raw::c_long,
    pub sc_r15: ::std::os::raw::c_long,
    pub sc_trapno: ::std::os::raw::c_int,
    pub sc_fs: ::std::os::raw::c_short,
    pub sc_gs: ::std::os::raw::c_short,
    pub sc_addr: ::std::os::raw::c_long,
    pub sc_flags: ::std::os::raw::c_int,
    pub sc_es: ::std::os::raw::c_short,
    pub sc_ds: ::std::os::raw::c_short,
    pub sc_err: ::std::os::raw::c_long,
    pub sc_rip: ::std::os::raw::c_long,
    pub sc_cs: ::std::os::raw::c_long,
    pub sc_rflags: ::std::os::raw::c_long,
    pub sc_rsp: ::std::os::raw::c_long,
    pub sc_ss: ::std::os::raw::c_long,
    pub sc_len: ::std::os::raw::c_long,
    pub sc_fpformat: ::std::os::raw::c_long,
    pub sc_ownedfp: ::std::os::raw::c_long,
    pub sc_fpstate: [::std::os::raw::c_long; 64usize],
    pub sc_fsbase: ::std::os::raw::c_long,
    pub sc_gsbase: ::std::os::raw::c_long,
    pub sc_xfpustate: ::std::os::raw::c_long,
    pub sc_xfpustate_len: ::std::os::raw::c_long,
    pub sc_spare: [::std::os::raw::c_long; 4usize],
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        816usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        16usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_onstack as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_onstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rdi as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rsi as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rdx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rcx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r8 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r9 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rax as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rbx as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rbp as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rbp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r10 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r11 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r12 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r13 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r14 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_r15 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_r15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_trapno as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_fs as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_gs as *const _ as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_gs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_addr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_flags as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_es as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_ds as *const _ as usize },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_err as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rip as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_cs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rflags as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_rsp as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_rsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_ss as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_len as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_fpformat as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_fpformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_ownedfp as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_ownedfp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_fpstate as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_fpstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_fsbase as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_fsbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_gsbase as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_gsbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_xfpustate as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_xfpustate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_xfpustate_len as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_xfpustate_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigcontext>())).sc_spare as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(sc_spare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlockattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_spinlock {
    _unused: [u8; 0],
}
pub type pthread_t = *mut pthread;
pub type pthread_attr_t = *mut pthread_attr;
pub type pthread_mutex_t = *mut pthread_mutex;
pub type pthread_mutexattr_t = *mut pthread_mutex_attr;
pub type pthread_cond_t = *mut pthread_cond;
pub type pthread_condattr_t = *mut pthread_cond_attr;
pub type pthread_key_t = ::std::os::raw::c_int;
pub type pthread_once_t = pthread_once;
pub type pthread_rwlock_t = *mut pthread_rwlock;
pub type pthread_rwlockattr_t = *mut pthread_rwlockattr;
pub type pthread_barrier_t = *mut pthread_barrier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrierattr {
    _unused: [u8; 0],
}
pub type pthread_barrierattr_t = *mut pthread_barrierattr;
pub type pthread_spinlock_t = *mut pthread_spinlock;
pub type pthread_addr_t = *mut ::std::os::raw::c_void;
pub type pthread_startroutine_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_once {
    pub state: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
}
#[test]
fn bindgen_test_layout_pthread_once() {
    assert_eq!(
        ::std::mem::size_of::<pthread_once>(),
        16usize,
        concat!("Size of: ", stringify!(pthread_once))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_once>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_once))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_once>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_once>())).mutex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_once),
            "::",
            stringify!(mutex)
        )
    );
}
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type size_t = __size_t;
pub type uid_t = __uid_t;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    pub sigval_int: ::std::os::raw::c_int,
    pub sigval_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sigval_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sigval_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sigval_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sigval_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _threadid: __lwpid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    pub _kevent_flags: ::std::os::raw::c_ushort,
    pub __spare__: [::std::os::raw::c_long; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub _attribute: *mut *mut pthread_attr,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._function as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))._attribute as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._threadid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_threadid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._sigev_thread as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._kevent_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_kevent_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>())).__spare__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(__spare__)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        80usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>()))._sigev_un as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub _reason: __siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __siginfo__bindgen_ty_1 {
    pub _fault: __siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _timer: __siginfo__bindgen_ty_1__bindgen_ty_2,
    pub _mesgq: __siginfo__bindgen_ty_1__bindgen_ty_3,
    pub _poll: __siginfo__bindgen_ty_1__bindgen_ty_4,
    pub __spare__: __siginfo__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub _trapno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___siginfo__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1__bindgen_ty_1>()))._trapno as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_trapno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_2 {
    pub _timerid: ::std::os::raw::c_int,
    pub _overrun: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___siginfo__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1__bindgen_ty_2>()))._timerid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_timerid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1__bindgen_ty_2>()))._overrun as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(_overrun)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_3 {
    pub _mqd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___siginfo__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1__bindgen_ty_3>()))._mqd as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_mqd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_4 {
    pub _band: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout___siginfo__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1__bindgen_ty_4>()))._band as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(_band)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_5 {
    pub __spare1__: ::std::os::raw::c_long,
    pub __spare2__: [::std::os::raw::c_int; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_5>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1__bindgen_ty_5>())).__spare1__ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(__spare1__)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1__bindgen_ty_5>())).__spare2__ as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(__spare2__)
        )
    );
}
#[test]
fn bindgen_test_layout___siginfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(__siginfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo__bindgen_ty_1>()))._fault as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1),
            "::",
            stringify!(_fault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo__bindgen_ty_1>()))._timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo__bindgen_ty_1>()))._mesgq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1),
            "::",
            stringify!(_mesgq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo__bindgen_ty_1>()))._poll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1),
            "::",
            stringify!(_poll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__siginfo__bindgen_ty_1>())).__spare__ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo__bindgen_ty_1),
            "::",
            stringify!(__spare__)
        )
    );
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        80usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>()))._reason as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(_reason)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: sigaction__bindgen_ty_1,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_mask: sigset_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).__sa_handler as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).__sa_sigaction as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        32usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
}
pub type sig_t = __sighandler_t;
pub type __siginfohandler_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut __siginfo,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type stack_t = sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaltstack>())).ss_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaltstack>())).ss_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: __sighandler_t,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(arg1: ::std::os::raw::c_int, arg2: __sighandler_t) -> __sighandler_t;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type u_quad_t = __uint64_t;
pub type quad_t = __int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type c_caddr_t = *const ::std::os::raw::c_char;
pub type blksize_t = __blksize_t;
pub type cpuwhich_t = __cpuwhich_t;
pub type cpulevel_t = __cpulevel_t;
pub type cpusetid_t = __cpusetid_t;
pub type blkcnt_t = __blkcnt_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type critical_t = __critical_t;
pub type daddr_t = __daddr_t;
pub type dev_t = __dev_t;
pub type fflags_t = __fflags_t;
pub type fixpt_t = __fixpt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type gid_t = __gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type key_t = __key_t;
pub type lwpid_t = __lwpid_t;
pub type mode_t = __mode_t;
pub type accmode_t = __accmode_t;
pub type nlink_t = __nlink_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type register_t = __register_t;
pub type rlim_t = __rlim_t;
pub type sbintime_t = __int64_t;
pub type segsz_t = __segsz_t;
pub type ssize_t = __ssize_t;
pub type suseconds_t = __suseconds_t;
pub type timer_t = __timer_t;
pub type mqd_t = __mqd_t;
pub type u_register_t = __u_register_t;
pub type useconds_t = __useconds_t;
pub type cap_ioctl_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cap_rights {
    _unused: [u8; 0],
}
pub type cap_rights_t = cap_rights;
pub type kvaddr_t = __uint64_t;
pub type ksize_t = __uint64_t;
pub type vm_offset_t = __vm_offset_t;
pub type vm_ooffset_t = __uint64_t;
pub type vm_paddr_t = __vm_paddr_t;
pub type vm_pindex_t = __uint64_t;
pub type vm_size_t = __vm_size_t;
pub type rman_res_t = __rman_res_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_ulong;
pub type fd_mask = __fd_mask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn mmap(
        arg1: *mut ::std::os::raw::c_void,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: off_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg32 {
    pub r_fs: __uint32_t,
    pub r_es: __uint32_t,
    pub r_ds: __uint32_t,
    pub r_edi: __uint32_t,
    pub r_esi: __uint32_t,
    pub r_ebp: __uint32_t,
    pub r_isp: __uint32_t,
    pub r_ebx: __uint32_t,
    pub r_edx: __uint32_t,
    pub r_ecx: __uint32_t,
    pub r_eax: __uint32_t,
    pub r_trapno: __uint32_t,
    pub r_err: __uint32_t,
    pub r_eip: __uint32_t,
    pub r_cs: __uint32_t,
    pub r_eflags: __uint32_t,
    pub r_esp: __uint32_t,
    pub r_ss: __uint32_t,
    pub r_gs: __uint32_t,
}
#[test]
fn bindgen_test_layout_reg32() {
    assert_eq!(
        ::std::mem::size_of::<reg32>(),
        76usize,
        concat!("Size of: ", stringify!(reg32))
    );
    assert_eq!(
        ::std::mem::align_of::<reg32>(),
        4usize,
        concat!("Alignment of ", stringify!(reg32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_fs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_es as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_ds as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_edi as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_edi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_esi as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_esi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_ebp as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_ebp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_isp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_isp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_ebx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_ebx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_edx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_edx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_ecx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_ecx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_eax as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_eax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_trapno as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_err as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_eip as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_cs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_eflags as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_esp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_ss as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg32>())).r_gs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(reg32),
            "::",
            stringify!(r_gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg {
    pub r_r15: __int64_t,
    pub r_r14: __int64_t,
    pub r_r13: __int64_t,
    pub r_r12: __int64_t,
    pub r_r11: __int64_t,
    pub r_r10: __int64_t,
    pub r_r9: __int64_t,
    pub r_r8: __int64_t,
    pub r_rdi: __int64_t,
    pub r_rsi: __int64_t,
    pub r_rbp: __int64_t,
    pub r_rbx: __int64_t,
    pub r_rdx: __int64_t,
    pub r_rcx: __int64_t,
    pub r_rax: __int64_t,
    pub r_trapno: __uint32_t,
    pub r_fs: __uint16_t,
    pub r_gs: __uint16_t,
    pub r_err: __uint32_t,
    pub r_es: __uint16_t,
    pub r_ds: __uint16_t,
    pub r_rip: __int64_t,
    pub r_cs: __int64_t,
    pub r_rflags: __int64_t,
    pub r_rsp: __int64_t,
    pub r_ss: __int64_t,
}
#[test]
fn bindgen_test_layout_reg() {
    assert_eq!(
        ::std::mem::size_of::<reg>(),
        176usize,
        concat!("Size of: ", stringify!(reg))
    );
    assert_eq!(
        ::std::mem::align_of::<reg>(),
        8usize,
        concat!("Alignment of ", stringify!(reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r15 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_r15)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r14 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_r14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r13 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_r13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r12 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_r12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r11 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_r11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r10 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_r10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r9 as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_r9))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_r8 as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_r8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rdi as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rdi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rsi as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rbp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rbp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rbx as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rdx as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rdx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rcx as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rcx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rax as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_trapno as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_trapno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_fs as *const _ as usize },
        124usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_fs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_gs as *const _ as usize },
        126usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_gs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_err as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_es as *const _ as usize },
        132usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_es))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_ds as *const _ as usize },
        134usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_ds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rip as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_cs as *const _ as usize },
        144usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_cs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rflags as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_rsp as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(reg),
            "::",
            stringify!(r_rsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg>())).r_ss as *const _ as usize },
        168usize,
        concat!("Offset of field: ", stringify!(reg), "::", stringify!(r_ss))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpreg32 {
    pub fpr_env: [__uint32_t; 7usize],
    pub fpr_acc: [[__uint8_t; 10usize]; 8usize],
    pub fpr_ex_sw: __uint32_t,
    pub fpr_pad: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout_fpreg32() {
    assert_eq!(
        ::std::mem::size_of::<fpreg32>(),
        176usize,
        concat!("Size of: ", stringify!(fpreg32))
    );
    assert_eq!(
        ::std::mem::align_of::<fpreg32>(),
        4usize,
        concat!("Alignment of ", stringify!(fpreg32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg32>())).fpr_env as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg32),
            "::",
            stringify!(fpr_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg32>())).fpr_acc as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg32),
            "::",
            stringify!(fpr_acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg32>())).fpr_ex_sw as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg32),
            "::",
            stringify!(fpr_ex_sw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg32>())).fpr_pad as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg32),
            "::",
            stringify!(fpr_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fpreg {
    pub fpr_env: [__uint64_t; 4usize],
    pub fpr_acc: [[__uint8_t; 16usize]; 8usize],
    pub fpr_xacc: [[__uint8_t; 16usize]; 16usize],
    pub fpr_spare: [__uint64_t; 12usize],
}
#[test]
fn bindgen_test_layout_fpreg() {
    assert_eq!(
        ::std::mem::size_of::<fpreg>(),
        512usize,
        concat!("Size of: ", stringify!(fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<fpreg>(),
        8usize,
        concat!("Alignment of ", stringify!(fpreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg>())).fpr_env as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg),
            "::",
            stringify!(fpr_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg>())).fpr_acc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg),
            "::",
            stringify!(fpr_acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg>())).fpr_xacc as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg),
            "::",
            stringify!(fpr_xacc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpreg>())).fpr_spare as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(fpreg),
            "::",
            stringify!(fpr_spare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xmmreg {
    pub xmm_env: [__uint32_t; 8usize],
    pub xmm_acc: [[__uint8_t; 16usize]; 8usize],
    pub xmm_reg: [[__uint8_t; 16usize]; 8usize],
    pub xmm_pad: [__uint8_t; 224usize],
}
#[test]
fn bindgen_test_layout_xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<xmmreg>(),
        512usize,
        concat!("Size of: ", stringify!(xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(xmmreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xmmreg>())).xmm_env as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xmmreg),
            "::",
            stringify!(xmm_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xmmreg>())).xmm_acc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xmmreg),
            "::",
            stringify!(xmm_acc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xmmreg>())).xmm_reg as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(xmmreg),
            "::",
            stringify!(xmm_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xmmreg>())).xmm_pad as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(xmmreg),
            "::",
            stringify!(xmm_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbreg32 {
    pub dr: [__uint32_t; 8usize],
}
#[test]
fn bindgen_test_layout_dbreg32() {
    assert_eq!(
        ::std::mem::size_of::<dbreg32>(),
        32usize,
        concat!("Size of: ", stringify!(dbreg32))
    );
    assert_eq!(
        ::std::mem::align_of::<dbreg32>(),
        4usize,
        concat!("Alignment of ", stringify!(dbreg32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dbreg32>())).dr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dbreg32),
            "::",
            stringify!(dr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbreg {
    pub dr: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout_dbreg() {
    assert_eq!(
        ::std::mem::size_of::<dbreg>(),
        128usize,
        concat!("Size of: ", stringify!(dbreg))
    );
    assert_eq!(
        ::std::mem::align_of::<dbreg>(),
        8usize,
        concat!("Alignment of ", stringify!(dbreg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dbreg>())).dr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(dbreg), "::", stringify!(dr))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptrace_xstate_info {
    pub xsave_mask: u64,
    pub xsave_len: u32,
}
#[test]
fn bindgen_test_layout_ptrace_xstate_info() {
    assert_eq!(
        ::std::mem::size_of::<ptrace_xstate_info>(),
        16usize,
        concat!("Size of: ", stringify!(ptrace_xstate_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ptrace_xstate_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ptrace_xstate_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_xstate_info>())).xsave_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_xstate_info),
            "::",
            stringify!(xsave_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_xstate_info>())).xsave_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_xstate_info),
            "::",
            stringify!(xsave_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptrace_io_desc {
    pub piod_op: ::std::os::raw::c_int,
    pub piod_offs: *mut ::std::os::raw::c_void,
    pub piod_addr: *mut ::std::os::raw::c_void,
    pub piod_len: size_t,
}
#[test]
fn bindgen_test_layout_ptrace_io_desc() {
    assert_eq!(
        ::std::mem::size_of::<ptrace_io_desc>(),
        32usize,
        concat!("Size of: ", stringify!(ptrace_io_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<ptrace_io_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(ptrace_io_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_io_desc>())).piod_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_io_desc),
            "::",
            stringify!(piod_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_io_desc>())).piod_offs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_io_desc),
            "::",
            stringify!(piod_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_io_desc>())).piod_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_io_desc),
            "::",
            stringify!(piod_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_io_desc>())).piod_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_io_desc),
            "::",
            stringify!(piod_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ptrace_lwpinfo {
    pub pl_lwpid: lwpid_t,
    pub pl_event: ::std::os::raw::c_int,
    pub pl_flags: ::std::os::raw::c_int,
    pub pl_sigmask: sigset_t,
    pub pl_siglist: sigset_t,
    pub pl_siginfo: __siginfo,
    pub pl_tdname: [::std::os::raw::c_char; 20usize],
    pub pl_child_pid: pid_t,
    pub pl_syscall_code: u_int,
    pub pl_syscall_narg: u_int,
}
#[test]
fn bindgen_test_layout_ptrace_lwpinfo() {
    assert_eq!(
        ::std::mem::size_of::<ptrace_lwpinfo>(),
        160usize,
        concat!("Size of: ", stringify!(ptrace_lwpinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ptrace_lwpinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ptrace_lwpinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_lwpid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_lwpid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_event as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_sigmask as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_siglist as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_siglist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_siginfo as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_siginfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_tdname as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_tdname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_child_pid as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_child_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_syscall_code as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_syscall_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_lwpinfo>())).pl_syscall_narg as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_lwpinfo),
            "::",
            stringify!(pl_syscall_narg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptrace_vm_entry {
    pub pve_entry: ::std::os::raw::c_int,
    pub pve_timestamp: ::std::os::raw::c_int,
    pub pve_start: u_long,
    pub pve_end: u_long,
    pub pve_offset: u_long,
    pub pve_prot: u_int,
    pub pve_pathlen: u_int,
    pub pve_fileid: ::std::os::raw::c_long,
    pub pve_fsid: u32,
    pub pve_path: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ptrace_vm_entry() {
    assert_eq!(
        ::std::mem::size_of::<ptrace_vm_entry>(),
        64usize,
        concat!("Size of: ", stringify!(ptrace_vm_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<ptrace_vm_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(ptrace_vm_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_timestamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_prot as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_prot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_pathlen as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_pathlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_fileid as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_fileid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_fsid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_fsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptrace_vm_entry>())).pve_path as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ptrace_vm_entry),
            "::",
            stringify!(pve_path)
        )
    );
}
extern "C" {
    pub fn ptrace(
        _request: ::std::os::raw::c_int,
        _pid: pid_t,
        _addr: caddr_t,
        _data: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
